<style lang="stylus" scoped>

</style>
<template>
  <view class="more-movies">
    <MovieGrid :movies.sync="movies" @onMovieDetailTap.user="onMovieDetailTap"/>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import MovieGrid from '../../components/movies/movie-grid'
  import {formateStars} from '../../utils/util'

  export default class MoreMovies extends wepy.page {
    config = {
      enablePullDownRefresh: true
    }

    data = {
      movies: [],
      requestUrl: '',
      totalCount: 0,
      isEmpty: true
    }

    methods = {
      onMovieDetailTap(movieId) {
        wepy.navigateTo({
          url: `/pages/movies/movie-detail?id=${movieId}`
        })
      }
    }

    onLoad(options) {
      const type = options.type
      wepy.setNavigationBarTitle({
        title: type
      })

      let dataUrl = ''
      switch (type) {
        case '正在热映':
          dataUrl = `${this.$parent.globalData.g_doubanBase}/v2/movie/in_theaters`
          break
        case '即将上映':
          dataUrl = `${this.$parent.globalData.g_doubanBase}/v2/movie/coming_soon`
          break
        case '豆瓣Top250':
          dataUrl = `${this.$parent.globalData.g_doubanBase}/v2/movie/top250`
          break
      }
      this.requestUrl = dataUrl
      this.getMovieListData(dataUrl)
    }

    getMovieListData(url) {
      wepy.request({
        url: url,
        method: 'GET',
        header: {
          'Content-Type': 'json'
        },
        success: res => {
          this.processDoubanData(res.data)
        },
        fail: error => {
          console.log(error)
        }
      })
    }

    processDoubanData(data) {
      let movies = []
      let subject
      let title
      let temp

      for (let key in data.subjects) {
        subject = data.subjects[key]
        title = subject.title
        if (title.length >= 0) {
          title = title.substring(0, 6) + '...'
        }
        temp = {
          // 转化星星数为数组
          stars: formateStars(subject.rating.stars),
          title: title,
          average: subject.rating.average === 0 ? '' : subject.rating.average,
          coverageUrl: subject.images.large,
          movieId: subject.id
        }
        movies.push(temp)
      }

      let totalMovies = {}

      // 如果需要绑定新加载的数据，需要和原有的数据合并在一起
      if (!this.isEmpty) {
        // concat 不改变原对象
        totalMovies = this.movies.concat(movies)
      } else {
        totalMovies = movies
        this.isEmpty = false
      }
      this.movies = totalMovies
      this.totalCount += 20
      this.$apply()

      // 数据加载成功后隐藏导航条加载动画
      wepy.hideNavigationBarLoading()
    }

    onReachBottom() {
      this.onScrollLower()
    }

    onScrollLower() {
      let nextUrl = `${this.requestUrl}?start=${this.totalCount}&count=20`
      this.getMovieListData(nextUrl)
      // 加载数据时在当前页面显示导航条加载动画
      wepy.showNavigationBarLoading()
    }

    onPullDownRefresh() {
      let refreshUrl = `${this.data.requestUrl}?start=0&count=20`
      // 清空原有数据
      this.movie = {}
      this.isEmpty = true
      this.getMovieListData(refreshUrl)
      // 请求数据成功后停止下拉动画
      wepy.stopPullDownRefresh()
    }

    components = {
      MovieGrid
    }
  }
</script>
